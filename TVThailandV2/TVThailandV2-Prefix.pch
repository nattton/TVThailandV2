//
// Prefix header for all source files of the 'TVThailandV2' target in the 'TVThailandV2' project
//

#import <Availability.h>

#ifndef __IPHONE_4_0
#warning "This project uses features only available in iOS SDK 4.0 and later."
#endif

#ifdef __OBJC__
    #import <UIKit/UIKit.h>
    #import <Foundation/Foundation.h>
#endif

#import <CoreData/CoreData.h>

#define kAPP_VERSION [[NSBundle mainBundle] objectForInfoDictionaryKey: @"CFBundleShortVersionString"]
#define kAPP_BUILD [[NSBundle mainBundle] objectForInfoDictionaryKey: (NSString *)kCFBundleVersionKey]

#define kAppTracker @"UA-22403997-3"
#define kOTVTracker @"UA-22403997-4"

#define kMessageID @"MessageID"
#define kYoutubeAutoPlay @"YoutubeAutoPlay"
#define kYoutubeWeb @"YoutubeWeb"
#define kDailyMotionWeb @"DailyMotionWeb"

#define kAPI_URL_BASE @"http://tv.makathon.com"
#define kWebUrl @"http://www.makathon.com"
#define kEmailSupport @"makathon.labs@gmail.com"
#define kFBFanPage @"http://goo.gl/LVJOM"

#define kOTV_URL_BASE @"http://api.otv.co.th/api/index.php"
#define kOTV_APP_ID @"16"
#define kOTV_API_VERSION @"2.0.1.2"
#define kOTV_CH7 @"Ch7"

#define kPrivacyPolicy_URL @"http://tv.makathon.com/privacy/mobile"

#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v)  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)
#define isPortrait [[UIApplication sharedApplication] statusBarOrientation] == UIInterfaceOrientationPortrait || [[UIApplication sharedApplication] statusBarOrientation] == UIInterfaceOrientationPortraitUpsideDown


#define kBarTintColor [UIColor colorWithRed:0/255.0 green:108/255.0 blue:146/255.0 alpha:1.0f]
#define kTintColor [UIColor colorWithRed:244/255.0 green:238/255.0 blue:186/255.0 alpha:1.0f]

#define kThemeColor [UIColor colorWithRed: 246/255.0 green:76/255.0 blue:93/255.0 alpha:1.0]

#define DEBUG_MODE 0
#ifdef DEBUG_MODE
    #define DLog( s, ...) NSLog( @"<%p %@:(%d)> %@", self, [[NSString stringWithUTF8String:__FILE__] lastPathComponent], __LINE__, [NSString stringWithFormat:(s), ##__VA_ARGS__] )
#else
#define DLog( s, ... )
#endif


#if defined DEBUG && defined VAST_LOG && VAST_LOG
    #define VLog(fmt, ...)      NSLog((@"%s [Line %d] " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
    #define VLogC()             VLog(@"");
    #define VLogV(var)          NSLog(@"%s [Line %d] <%p> " #var ": %@", __PRETTY_FUNCTION__, __LINE__, self, var)
    #define VLogR(rect)         VLogV(NSStringFromRect(rect))
    #define VLogS(size)         VLogV(NSStringFromSize(size))
    #define VLogI(var)          NSLog(@"%s [Line %d] " #var ": %d", __PRETTY_FUNCTION__, __LINE__, var)
    #define VLogF(var)          NSLog(@"%s [Line %d] " #var ": %f", __PRETTY_FUNCTION__, __LINE__, var)
    #define VLogB(var)          NSLog(@"%s [Line %d] " #var ": %@", __PRETTY_FUNCTION__, __LINE__, var ? @"YES" : @"NO")
#else
    #define VLog(...)
    #define VLogC()
    #define VLogV(var)
    #define VLogR(rect)
    #define VLogS(size)
    #define VLogI(var)
    #define VLogF(var)
    #define VLogB(var)
#endif